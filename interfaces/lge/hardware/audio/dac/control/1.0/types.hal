/*
 * Copyright (C) 2020 The LineageOS Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package vendor.lge.hardware.audio.dac.control@1.0;

enum Status : int32_t {
    OK,
    NOT_SUPPORTED,
    INVALID_ARGUMENTS,
    INVALID_STATE,
};

/**
* Features Supported by the Stock Audio HAL
* Use AudioSystem.setParameters to set
*/
enum HalFeature : int32_t {
    /**
    * if DAC Supported by the device
    * if this isnt present, the rest isnt 
    * supported either
    */
    QuadDAC,
    SoundPreset,
    DigitalFilter,
    BalanceLeft,
    BalanceRight,
};

/**
* Features not supported by default
* Needs kernelside implementation
*/
enum AdvancedFeature : int32_t {
    /**
    * Force the DAC into a specific mode
    */
    HifiMode,
    /**
    * Force a AVC volume
    */
    AVCVolume,
};

struct KeyValue {
    string name;
    string value;
};

struct Range {
    float max;
    float min;
    float step;
};

/**
* Struct for all supported states
* if states is empty, use range
*/
struct FeatureStates {
    vec<KeyValue> states;
    Range range;
};

/**
* Contains either a KeyValue pair or
* a value
* If KeyValue is empty, value will be used
* kv has to be in FeatureStates.states
* value has to be in [min, max] of FeatureStates.range
* of respective Feature
*/
struct FeatureState {
    KeyValue kv;
    float value;
};



